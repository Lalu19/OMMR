@using Microsoft.Extensions.Configuration;
@using Microsoft.AspNetCore.Http
@inject IConfiguration Configuration;

@{
    ViewBag.Title = "User";
    string apiUrl = Configuration.GetValue<string>("WebAPIBaseUrl");
}

<div class="page-header">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="#"><i class="fe fe-pie-chart mr-1"></i> User Console</a></li>
        <li class="breadcrumb-item active" aria-current="page">User List</li>
    </ol>

</div>

<div class="col-md-12 col-lg-12">
    <div class="card">
        <div class="card-header">
            <div class="card-title">Users</div>
        </div>
        <div class="card-body">

            <div class="table-responsive">
                <table id="userTab" class="table table-striped table-bordered nowrap dataTable no-footer dtr-inline" style="width:100%">
                    <thead>
                        <tr>
                            <th>Photo</th>
                            <th>Name</th>
                            <th>Role</th>
                            <th>User Name</th>
                            @*<th>Plant Name</th>*@
                            <th>Login Date</th>
                            <th>LogIn Time</th>
                            <th>LogOut Time</th>
                        </tr>
                    </thead>
                </table>
            </div>

        </div>
    </div>
</div>

@section scripts{
    <script>

        loadAllusewrlist()
        async function loadAllusewrlist() {
            var table = $('#userTab').DataTable();
            table.destroy();
            table = $('#userTab').dataTable({
                "paginationType": "full_numbers",
                "dom": 'Bfrtip',
                "buttons": ['excel', 'csv'],
                "searching": true,
                "paging": true,
                "sort": true,
                "info": true,
                "ajax": {
                    "url": '@apiUrl/api/Users/GetAllUserList',
                    "type": "GET",
                    "dataType": "json",
                    "headers": {
                        "authorization": "Bearer @Context.Session.GetString("TokenTxt")"
                    },
                    "error": function (data) {
                        if (data.status == 401) {
                            window.location.replace('/Message/TokenExpire');
                        } else if (data.status == 403) {
                            window.location.replace('/Message/Unauthorize');
                        }
                    }
                },
                "order": [],
                "columns": [
                    {
                        "render": function (data, type, row) {
                            if (row.imagePath === '')
                                return '';
                            else
                                return '<img style="margin-left: 28px;" class="avatar avatar-md rounded-circle" src="' + row.imagePath + '"/>'
                        }
                    },
                    { "data": "fullName", "orderable": true, "visible": true },
                    { "data": "roleName", "orderable": true, "visible": true },
                    { "data": "userName", "orderable": true, "visible": true },
                    //{ "data": "plantName", "orderable": true, "visible": true },
                    // { "data": "logDate", "orderable": true },
                    {
                        "data": "logDate",
                        "orderable": true,
                        "render": function (data, type, row) {
                            return row.logDate != null ? row.logDate.substring(0, 10) : '';
                        }
                    },
                    //{ "data": "logInTime", "orderable": true, "visible": true },
                    {
                        "data": "logInTime",
                        "render": function (data) {
                            if (data === null) return "";
                            var date = new Date(data);
                            var hour = date.getHours();
                            var amOrPm = hour >= 12 ? "PM" : "AM";

                            if (hour > 12) {
                                hour = hour - 12;
                            } else if (hour === 0) {
                                hour = 12;
                            }
                            var formattedTime =
                                (hour < 10 ? "0" + hour : hour) +
                                ":" +
                                (date.getMinutes() < 10 ? "0" + date.getMinutes() : date.getMinutes()) +
                                " " +
                                amOrPm;

                            // Use inline style to color the time green
                            return '<span style="color: green;">' + formattedTime + '</span>';
                        }
                    },
                    //{ "data": "logOutTime", "orderable": true, "visible": true },
                    {
                        "data": "logOutTime",
                        "render": function (data) {
                            if (data === null) {
                                // Display session expiry message
                                return '<span style="color: red;">Session Expired</span>';
                            }

                            var date = new Date(data);
                            var hour = date.getHours();
                            var amOrPm = hour >= 12 ? "PM" : "AM";

                            if (hour > 12) {
                                hour = hour - 12;
                            } else if (hour === 0) {
                                hour = 12;
                            }
                            var formattedTime =
                                (hour < 10 ? "0" + hour : hour) +
                                ":" +
                                (date.getMinutes() < 10 ? "0" + date.getMinutes() : date.getMinutes()) +
                                " " +
                                amOrPm;

                            // Use inline style to color the time green
                            return '<span style="color: red;">' + formattedTime + '</span>';
                        }
                    },
                ]
            });
        }
    </script>
}